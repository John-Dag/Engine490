#ifdef GL_ES 
#define LOWP lowp
#define MED mediump
#define HIGH highp
precision mediump float;
#else
#define MED
#define LOWP
#define HIGH
#endif

varying vec4 pos;
varying vec4 wpos;
uniform mat4 u_viewWorldTrans;
uniform mat4 u_projViewTrans;
uniform mat4 u_projViewWorldTrans;
uniform mat4 u_viewTrans;
uniform mat4 u_worldTrans;
uniform float time;
uniform vec2 resolution;

#ifdef ColorMultiplier
uniform vec3 u_colorMultiplier;
#endif

#ifdef numPointLights
#if numPointLights > 0
struct PointLight
{
  vec3 color;
	vec3 position;
};
uniform PointLight u_pointLights[numPointLights];
#endif
#endif // numPointLights

#if defined(specularTextureFlag) || defined(specularColorFlag)
#define specularFlag
#endif

#ifdef normalFlag
varying vec3 v_normal;
#endif //normalFlag

#if defined(colorFlag)
varying vec4 v_color;
#endif

#ifdef blendedFlag
varying float v_opacity;
#ifdef alphaTestFlag
varying float v_alphaTest;
#endif //alphaTestFlag
#endif //blendedFlag

#if defined(diffuseTextureFlag) || defined(specularTextureFlag)
#define textureFlag
varying MED vec2 v_texCoords0;
#endif

#ifdef diffuseColorFlag
uniform vec4 u_diffuseColor;
#endif

#ifdef diffuseTextureFlag
uniform sampler2D u_diffuseTexture;
#endif

#ifdef specularColorFlag
uniform vec4 u_specularColor;
#endif

#ifdef specularTextureFlag
uniform sampler2D u_specularTexture;
#endif

#ifdef normalTextureFlag
uniform sampler2D u_normalTexture;
#endif

#ifdef lightingFlag
varying vec3 v_lightDiffuse;

#if	defined(ambientLightFlag) || defined(ambientCubemapFlag) || defined(sphericalHarmonicsFlag)
#define ambientFlag
#endif //ambientFlag

#ifdef specularFlag
varying vec3 v_lightSpecular;
#endif //specularFlag

#ifdef shadowMapFlag
uniform sampler2D u_shadowTexture;
uniform float u_shadowPCFOffset;
varying vec3 v_shadowMapUv;
#define separateAmbientFlag






float getShadowness(vec2 offset)
{
    const vec4 bitShifts = vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0);
    return step(v_shadowMapUv.z, dot(texture2D(u_shadowTexture, v_shadowMapUv.xy + offset), bitShifts));//+(1.0/255.0));	
}

float getShadow() 
{
	return (//getShadowness(vec2(0,0)) + 
			getShadowness(vec2(u_shadowPCFOffset, u_shadowPCFOffset)) +
			getShadowness(vec2(-u_shadowPCFOffset, u_shadowPCFOffset)) +
			getShadowness(vec2(u_shadowPCFOffset, -u_shadowPCFOffset)) +
			getShadowness(vec2(-u_shadowPCFOffset, -u_shadowPCFOffset))) * 0.25;
}



#endif //shadowMapFlag

#if defined(ambientFlag) && defined(separateAmbientFlag)
varying vec3 v_ambientLight;
#endif //separateAmbientFlag

#endif //lightingFlag

#ifdef fogFlag
uniform vec4 u_fogColor;
varying float v_fog;
#endif // fogFlag

	float aFract(vec2 c)
	{
		return fract(sin(dot(c.xy,vec2(12.9898,78.233)))*43758.5453);
	}

void main() {
	#if defined(normalFlag) 
		vec3 normal = v_normal;
	#endif // normalFlag
		
	#if defined(diffuseTextureFlag) && defined(diffuseColorFlag) && defined(colorFlag)
		vec4 diffuse = texture2D(u_diffuseTexture, v_texCoords0) * u_diffuseColor * v_color;
	#elif defined(diffuseTextureFlag) && defined(diffuseColorFlag)
		vec4 diffuse = texture2D(u_diffuseTexture, v_texCoords0) * u_diffuseColor;
	#elif defined(diffuseTextureFlag) && defined(colorFlag)
		vec4 diffuse = texture2D(u_diffuseTexture, v_texCoords0) * v_color;
	#elif defined(diffuseTextureFlag)
		vec4 diffuse = texture2D(u_diffuseTexture, v_texCoords0);
	#elif defined(diffuseColorFlag) && defined(colorFlag)
		vec4 diffuse = u_diffuseColor * v_color;
	#elif defined(diffuseColorFlag)
		vec4 diffuse = u_diffuseColor;
	#elif defined(colorFlag)
		vec4 diffuse = v_color;
	#else
		vec4 diffuse = vec4(1.0);
	#endif
	
		#ifdef normalTextureFlag
				vec3 tnormal =2* texture2D (u_normalTexture, v_texCoords0.st).rgb - vec3(1.0);
				tnormal = normalize (tnormal);
				#if defined(numPointLights) && (numPointLights > 0)
				float lambertFactor=0;
				vec3 lightDir;
				for (int i = 0; i < numPointLights; i++) {
						lightDir = u_pointLights[i].position - pos.xyz;
						lambertFactor=max(lambertFactor,max ( dot (normalize(lightDir),tnormal), 0.1));
					}
				#else
					float lambertFactor= max (dot (v_normal, tnormal), 0.3) ;
				#endif

				diffuse.rgb*=lambertFactor;
		#endif

	#if (!defined(lightingFlag))  
		gl_FragColor.rgb = diffuse.rgb;
	#elif (!defined(specularFlag))
		#if defined(ambientFlag) && defined(separateAmbientFlag)
			#ifdef shadowMapFlag
				gl_FragColor.rgb = (diffuse.rgb * (v_ambientLight + getShadow() * v_lightDiffuse));
				//gl_FragColor.rgb = texture2D(u_shadowTexture, v_shadowMapUv.xy);
			#else
				gl_FragColor.rgb = (diffuse.rgb * (v_ambientLight + v_lightDiffuse));
			#endif //shadowMapFlag
		#else
			#ifdef shadowMapFlag
				gl_FragColor.rgb = getShadow() * (diffuse.rgb * v_lightDiffuse);
			#else
				gl_FragColor.rgb = (diffuse.rgb * v_lightDiffuse);
			#endif //shadowMapFlag
		#endif
	


		

		
		
	#else
		#if defined(specularTextureFlag) && defined(specularColorFlag)
			vec3 specular = texture2D(u_specularTexture, v_texCoords0).rgb * u_specularColor.rgb * v_lightSpecular;
		#elif defined(specularTextureFlag)
			vec3 specular = texture2D(u_specularTexture, v_texCoords0).rgb * v_lightSpecular;
		#elif defined(specularColorFlag)
			vec3 specular = u_specularColor.rgb * v_lightSpecular;
		#else
			vec3 specular = v_lightSpecular;
		#endif
			
		#if defined(ambientFlag) && defined(separateAmbientFlag)
			#ifdef shadowMapFlag
			gl_FragColor.rgb = (diffuse.rgb * (getShadow() * v_lightDiffuse + v_ambientLight)) + specular;
				//gl_FragColor.rgb = texture2D(u_shadowTexture, v_shadowMapUv.xy);
			#else
				gl_FragColor.rgb = (diffuse.rgb * (v_lightDiffuse + v_ambientLight)) + specular;
			#endif //shadowMapFlag
		#else
			#ifdef shadowMapFlag
				gl_FragColor.rgb = getShadow() * ((diffuse.rgb * v_lightDiffuse) + specular);
			#else
				gl_FragColor.rgb = (diffuse.rgb * v_lightDiffuse) + specular;
			#endif //shadowMapFlag
		#endif
	#endif //lightingFlag

	//WizNerd shader start
	#ifdef ColorMultiplier
		//gl_FragColor =vec4(gl_FragColor.r * u_colorMultiplier.r, gl_FragColor.g * u_colorMultiplier.g, gl_FragColor.b * u_colorMultiplier.b, 1.0);
		//gl_FragColor =vec4(gl_FragColor.r +(1-gl_FragColor.r) * u_colorMultiplier.r, gl_FragColor.g +(1-gl_FragColor.g) *u_colorMultiplier.g, gl_FragColor.b +(1-gl_FragColor.b) *u_colorMultiplier.b, 1.0);
		//gl_FragColor.rgb = mix(gl_FragColor.rgb, u_colorMultiplier.rgb, 1.0f);
		gl_FragColor=mix(gl_FragColor,vec4(u_colorMultiplier,1.0),.2);
		
	#endif
	
	#ifdef FireBall
		//vec4 ppos=u_projViewTrans*u_worldTrans* wpos;

		vec2 p=v_texCoords0*0.5;
		
		float Color = 3.0 - (3.0*length(2.0*p));

		vec3 coord = vec3(atan(p.x,p.y)/6.2832+0.5, length(p)*0.4, 0.5);

		for(int i = 2; i <= 7; i++)
		{
		float power = pow(2.0, float(i));

		vec3 uv = coord + vec3(0.,time*5.0, time*5.0);
		float res = power*16.0;

		vec3 s = vec3(1e0, 1e2, 1e4);
		  uv *= res;
		vec3 uv0 = floor(mod(uv, res))*s;
		vec3 uv1 = floor(mod(uv+vec3(1.), res))*s;

		vec3 f = fract(uv); f = f*f*(3.0-2.0*f);

		vec4 v = vec4(uv0.x+uv0.y+uv0.z, uv1.x+uv0.y+uv0.z,
	    uv0.x+uv1.y+uv0.z, uv1.x+uv1.y+uv0.z);

		vec4 r = fract(sin(v*1e-3)*1e5);
		float r0 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);

		r = fract(sin((v + uv1.z - uv0.z)*1e-3)*1e5);
		float r1 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);

		float snoise = mix(r0, r1, f.z)*2.-1.0;

    	Color += (1.5 / power) * snoise;
		}

		gl_FragColor = vec4( Color, pow(max(Color,0.),2.)*0.4, pow(max(Color,0.),3.)*0.15 , 1.0);
		
		//gl_FragColor=vec4(vec2(gl_FragCoord.x/(resolution.x*2),gl_FragCoord.y/(resolution.y*2)),0,1.0);
		
	#endif
	
	
	#ifdef Fract
		vec4 ppos=u_projViewTrans*u_worldTrans* wpos;
		vec2 p=gl_FragColor.xy;
		float Color = 5.0 - (3.0*length(2.0*p));
		vec3 coord = vec3(atan(p.x,p.y)/6.2832+0.5, length(p)*0.4, 0.5);

		for(int i = 2; i <= 7; i++)
		{
		float power = pow(2.0, float(i));

		vec3 uv = coord + vec3(0.,time*2, time*2);
		float res = power*16.0;

		vec3 s = vec3(1e0, 1e2, 1e4);
		  uv *= res;
		vec3 uv0 = floor(mod(uv, res))*s;
		vec3 uv1 = floor(mod(uv+vec3(1.), res))*s;

		vec3 f = fract(uv); f = f*f*(3.0-2.0*f);

		vec4 v = vec4(uv0.x+uv0.y+uv0.z, uv1.x+uv0.y+uv0.z,
	    uv0.x+uv1.y+uv0.z, uv1.x+uv1.y+uv0.z);

		vec4 r = fract(sin(v*1e-3)*1e5);
		float r0 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);

		r = fract(sin((v + uv1.z - uv0.z)*1e-3)*1e5);
		float r1 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);

		float snoise = mix(r0, r1, f.z)*2.-1.0;

    	Color += (1.5 / power) * snoise;
    	
		}

		gl_FragColor = vec4( Color, pow(max(Color,0.),2.)*0.4, pow(max(Color,0.),3.)*0.15 , 1.0);
		
		
	#endif
	
	#ifdef Rainbow
		gl_FragColor=gl_FragColor+ vec4(gl_FragColor.x+sin(time*2), gl_FragColor.y+cos(time*2),gl_FragColor.z+cos(time*2+.5),1);
	#endif
	
	#ifdef BlackHole
				vec2 tc=1.5 * v_texCoords0;
				vec2 bhp =-(-tc)+gl_FragColor.xy-1.0;//gl_FragColor.xy;//v_texCoords0;
                float a = time*40.0;
                float d,e,f,g,h,i,r,q;
                g=1.0/40.0;
                e=400.0*(bhp.x*0.5+0.5);
                f=400.0*(bhp.y*0.5+0.5);
                i=200.0+sin(e*g+a/150.0)*20.0;
                d=200.0+cos(f*g/2.0)*18.0+cos(e*g)*7.0;
                r=sqrt((i-e)*(i-e)+(d-f)*(d-f));
                q=f/r;
                e=(r*cos(q))-a/2.0;f=(r*sin(q))-a/2.0;
                d=sin(e*g)*176.0+sin(e*g)*164.0+r;
                h=((f+d)+a/2.0)*g;
                i=cos(h+r*bhp.x/1.3)*(e+e+a)+cos(q*g*6.0)*(r+h/3.0);
                h=sin(f*g)*144.0-sin(e*g)*212.0*bhp.x;
                h=(h+(f-e)*q+sin(r-(a+h)/7.0)*10.0+i/4.0)*g;
                i+=cos(h*2.3*sin(a/350.0-q))*184.0*sin(q-(r*4.3+a/12.0)*g)+tan(r*g+h)*184.0*cos(r*g+h);
                i=mod(i/5.6,256.0)/64.0;
                if(i<0.0) i+=4.0;
                if(i>=2.0) i=4.0-i;
                d=r/350.0;
                d+=sin(d*d*8.0)*0.52;
                f=(sin(a*g)+1.0)/2.0;
                gl_FragColor=vec4(vec3(f*i/1.6,i/2.0+d/13.0,i)*d*bhp.x+vec3(i/1.3+d/8.0,i/2.0+d/18.0,i)*d*(1.0-bhp.x),1.0);
	#endif
	
	#ifdef Laser

vec2 pos=vec2(0,0);
vec2 mx=pos;

mx.x=pos.x+sin(time)*1.5;
mx.y=pos.y+cos(time)*1.5;
float t=0.001*time;
float pi=3.1415;
vec2 r=resolution;
vec2 f=v_texCoords0*r;
vec4 b=texture2D(u_diffuseTexture,(f/r))*0.84;
vec2 p=(f-.5*r)/min(r.x,r.y);
vec3 c=vec3(0);
vec2 m=(mx-.5)*1.2;
for(int i=0;i<111;++i){
vec2 pos=m+vec2(.1*cos(t*2.*pi*float(i)/47.),.1*sin(t*2.*pi*float(i)/47.));
c+=(0.005/length(p-pos*aFract(pos)))*vec3(1);}
gl_FragColor=clamp(vec4(normalize(vec3(0.7+0.5*m,.7))*c-b.rgb,1),-0.1,1);


	#endif
	
	//WizNerd shader end

	#ifdef fogFlag
		gl_FragColor.rgb = mix(gl_FragColor.rgb, u_fogColor.rgb, v_fog);
	#endif // end fogFlag

	#ifdef blendedFlag
		gl_FragColor.a = diffuse.a * v_opacity;
		#ifdef alphaTestFlag
			if (gl_FragColor.a <= v_alphaTest)
				discard;
		#endif
	#else
		gl_FragColor.a = 1.0;
	#endif

}
